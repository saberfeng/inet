[General]
# allopen_test2.ini
#-------------------------------A v-----------------------------
network = TsnNetSmallRing
description = "all open gate scheduling"
record-eventlog = true

#*.delaySignalSource.typename = ""

*.s{0..1000}.typename = "TsnSwitch"

# client applications
*.d3.numApps = 2
*.d3.app[*].typename = "UdpSourceApp"
#-------------------------------B v | application configuration--------------------------
*.d3.app[*].source.packetNameFormat = "%M-%m-%c"
*.d3.app[0].display-name = "FG0"
*.d3.app[0].io.destAddress = "d0"
*.d3.app[0].io.destPort = 1000
*.d3.app[0].source.packetLength = 1500B-58B
*.d3.app[0].source.productionInterval = 1000us
*.d3.app[0].source.initialProductionOffset = 200us
*.d3.app[1].display-name = "FG1"
*.d3.app[1].io.destAddress = "d0"
*.d3.app[1].io.destPort = 1001
*.d3.app[1].source.packetLength = 1500B-58B
*.d3.app[1].source.productionInterval = 500us
*.d3.app[1].source.initialProductionOffset = 0us

#; *.s1.eth[2].bitrate = 1000Mbps
#; *.s0.eth[1].bitrate = 1000Mbps

# server applications
*.d0.numApps = 2
*.d0.app[*].typename = "UdpSinkApp"
*.d0.app[0].display-name = "FG0"
*.d0.app[0].io.localPort = 1000
*.d0.app[1].display-name = "FG1"
*.d0.app[1].io.localPort = 1001

# # enable outgoing streams
# *.d*.hasOutgoingStreams = true

#----------------------------A v------------------------
# enable incoming/outgoing streams
*.d{0..1000}.hasIncomingStreams = true
*.d{0..1000}.hasOutgoingStreams = true

*.s{0..1000}.hasIncomingStreams = true
*.s{0..1000}.hasOutgoingStreams = true

# enable egress traffic shaping
*.s{0..1000}.hasEgressTrafficShaping = true
*.d{0..1000}.hasEgressTrafficShaping = true

# time-aware traffic shaping with 2 queues
*.s{0..1000}.eth[*].macLayer.queue.numTrafficClasses = 8
*.s{0..1000}.eth[*].macLayer.queue.queue[0..6].display-name = "best effort"
*.s{0..1000}.eth[*].macLayer.queue.queue[7].display-name = "video"

#---------------------------B v | encoder decoder identifier configuration-----------------------

# client stream identification
*.d3.bridging.streamIdentifier.identifier.mapping = [{stream: "FG0", packetFilter: expr(udp.destPort == 1000)},
                                                     {stream: "FG1", packetFilter: expr(udp.destPort == 1001)}]

# client stream encoding
*.d{0..1000}.bridging.streamCoder.encoder.mapping = [{stream: "FG0", pcp: 7},
                                                     {stream: "FG1", pcp: 7}]

*.s{0..1000}.bridging.streamCoder.decoder.mapping = [{pcp: 7, stream: "FG0"}, 
                                                     {pcp: 7, stream: "FG1"}]
*.s{0..1000}.bridging.streamCoder.encoder.mapping = [{stream: "FG0", pcp: 7},
                                                     {stream: "FG1", pcp: 7}]


# enable egress traffic shaping
# *.s{0..1000}.hasEgressTrafficShaping = true

#-------------------------A v-------------------------
# automatic gate scheduling
# *.gateScheduleConfigurator.typename = "AlwaysOpenGateScheduleConfigurator"
*.gateScheduleConfigurator.typename = "RobustnessScheduleConfigurator"
*.gateScheduleConfigurator.gateCycleDuration = 1ms
*.gateScheduleConfigurator.schedule_path = "input/omnetpp_schedule.txt"
*.gateScheduleConfigurator.output_schedule_path = "output/log_schedule.txt"

#------------------------B v---------------------------
# 58B = 8B (UDP) + 20B (IP) + 4B (802.1 Q-TAG) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.gateScheduleConfigurator.configuration =
   [{pcp: 7, gateIndex: 0, application: "app[0]", source: "d3", destination: "d0", packetLength: 1000B + 58B, packetInterval: 1000us, maxLatency: 500us},
	 {pcp: 7, gateIndex: 0, application: "app[1]", source: "d3", destination: "d0", packetLength: 1000B + 58B, packetInterval: 500us, maxLatency: 500us}]

#-----------------------A v-----------------------------------
# gate scheduling visualization
*.visualizer.gateScheduleVisualizer.displayGateSchedules = true
*.visualizer.gateScheduleVisualizer.displayDuration = 1000us
*.visualizer.gateScheduleVisualizer.gateFilter = "*.s0.eth[*].**.transmissionGate[7] or *.s1.eth[*].**.transmissionGate[7] or *.d3.eth[*].**.transmissionGate[7]"
*.visualizer.gateScheduleVisualizer.height = 16

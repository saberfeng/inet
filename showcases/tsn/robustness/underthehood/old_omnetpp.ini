[General]
network = RobustnessNetwork
description = "Per-stream filtering several packet sources with sinusoidally changing datarate"

*.numSources = 3
*.sources[*].packetLength = 100B
#*.sources[0].productionInterval = replaceUnit(sin(dropUnit(simTime() * 1)) + sin(dropUnit(simTime() * 8)) + 10, "ms") / 100
#*.sources[1].productionInterval = replaceUnit(sin(dropUnit(simTime() * 2)) + 1.5, "ms") / 10
#*.sources[2].productionInterval = replaceUnit(sin(dropUnit(simTime() * 3)) + 1.5, "ms") / 10
*.sources[0].productionInterval = 1ms
*.sources[1].productionInterval = 1ms
*.sources[2].productionInterval = 1ms
#*.sources[0].initialProductionOffset = 0ms
#*.sources[1].initialProductionOffset = 0ms
#*.sources[2].initialProductionOffset = 0ms

*.identifier.mapping = [{packetFilter: "sources[0]*", stream: "s0"},
                        {packetFilter: "sources[1]*", stream: "s1"},
                        {packetFilter: "sources[2]*", stream: "s2"}]

*.filter.typename = "SimpleIeee8021qFilter"
*.filter.filter[*].typename = "OrdinalBasedDropper"
*.filter.filter[0].dropsVector = "1;3;5" # drop the No.1, No.3, No.5 packet
*.filter.filter[1].dropsVector = "2;4;6"
*.filter.numStreams = 3
*.filter.classifier.mapping = {s0: 0, s1: 1, s2: 2}

**.initialNumTokens = 0
*.filter.meter[*].typename = "SingleRateTwoColorMeter"
*.filter.meter[*].committedInformationRate = 8Mbps
*.filter.meter[*].committedBurstSize = 100kB

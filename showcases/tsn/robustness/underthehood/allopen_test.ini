[General]
network = inet.networks.tsn.TsnDumbbellNetwork
description = "Eager gate scheduling"
record-eventlog = true

*.switch1.typename = "TsnSwitch1"
*.switch2.typename = "TsnSwitch2"

# client applications
*.client1.numApps = 1
*.client1.app[*].typename = "UdpSourceApp"
*.client1.app[0].display-name = "best effort"
*.client1.app[0].io.destAddress = "server1"
*.client1.app[0].io.destPort = 1000
*.client1.app[*].source.packetNameFormat = "%M-%m-%c"
*.client1.app[0].source.packetLength = 1000B
*.client1.app[0].source.productionInterval = 2000us # ~16Mbps

# server applications
*.server*.numApps = 1
*.server*.app[*].typename = "UdpSinkApp"
*.server*.app[0].display-name = "best effort"
*.server*.app[0].io.localPort = 1000

# enable outgoing streams
*.client1.hasOutgoingStreams = true

# client stream identification
*.client1.bridging.streamIdentifier.identifier.mapping = [{stream: "best effort", packetFilter: expr(udp.destPort == 1000)}]

# client stream encoding
*.client1.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}]

# enable streams
*.switch*.hasIncomingStreams = true
*.switch*.hasOutgoingStreams = true

*.switch*.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "best effort"}]

*.switch*.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0}]

# enable incoming streams
*.server*.hasIncomingStreams = true

# enable egress traffic shaping
*.switch*.hasEgressTrafficShaping = true

# time-aware traffic shaping with 2 queues
*.switch*.eth[*].macLayer.queue.numTrafficClasses = 2
*.switch*.eth[*].macLayer.queue.queue[0].display-name = "best effort"
*.switch*.eth[*].macLayer.queue.queue[1].display-name = "video"

# automatic gate scheduling
*.gateScheduleConfigurator.typename = "AlwaysOpenGateScheduleConfigurator"
*.gateScheduleConfigurator.gateCycleDuration = 1ms
# 58B = 8B (UDP) + 20B (IP) + 4B (802.1 Q-TAG) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.gateScheduleConfigurator.configuration =
   [{pcp: 0, gateIndex: 0, application: "app[0]", source: "client1", destination: "server1", packetLength: 1000B + 58B, packetInterval: 500us, maxLatency: 500us}]

# gate scheduling visualization
*.visualizer.gateScheduleVisualizer.displayGateSchedules = true
*.visualizer.gateScheduleVisualizer.displayDuration = 100us
*.visualizer.gateScheduleVisualizer.gateFilter = "*.switch1.eth[2].** or *.switch2.eth[0].**.transmissionGate[0] or *.switch2.eth[1].**.transmissionGate[1]"
*.visualizer.gateScheduleVisualizer.height = 16
